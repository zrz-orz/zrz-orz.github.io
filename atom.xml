<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zrz_orz&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zrz-orz.github.io/"/>
  <updated>2019-09-23T06:14:29.064Z</updated>
  <id>https://zrz-orz.github.io/</id>
  
  <author>
    <name>zrz_orz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「Luogu 5029」 T&#39;ill It&#39;s Over</title>
    <link href="https://zrz-orz.github.io/2019/09/23/%E3%80%8CLuogu-5029%E3%80%8D-T-ill-It-s-Over/"/>
    <id>https://zrz-orz.github.io/2019/09/23/「Luogu-5029」-T-ill-It-s-Over/</id>
    <published>2019-09-23T06:08:35.000Z</published>
    <updated>2019-09-23T06:14:29.064Z</updated>
    
    <content type="html"><![CDATA[<p>对于每一种长度开一个点，那么每种操作分别建边跑网络流。</p><p>因为有区间加边所以要线段树优化建边。</p><p>&lt;!-- more --&gt;</p><p>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defination &#123;&#123;&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI std::pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(reg int i = a; i &lt;= b; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, a, b) for(reg int i = a; i &gt;= b; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="comment">// &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">min</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; reg <span class="keyword">char</span> ch = getchar(); reg <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(ch); ch = getchar()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 300005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tot, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> fir[N], nx[N &lt;&lt; <span class="number">1</span>], to[N &lt;&lt; <span class="number">1</span>], w[N &lt;&lt; <span class="number">1</span>], cur[N], dep[N];</span><br><span class="line"><span class="keyword">int</span> tree[M &lt;&lt; <span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> _, <span class="keyword">int</span> __, <span class="keyword">int</span> ___)</span> </span>&#123;</span><br><span class="line">    nx[++cnt] = fir[_];</span><br><span class="line">    fir[_] = cnt;</span><br><span class="line">    to[cnt] = __;</span><br><span class="line">    w[cnt] = ___;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree[x][type] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tree[x][type] = ++tot;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l, mid, x &lt;&lt; <span class="number">1</span>, type);</span><br><span class="line">    build(mid + <span class="number">1</span>, r, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, type);</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">        add(tree[x &lt;&lt; <span class="number">1</span>][type], tree[x][type], INT_MAX);</span><br><span class="line">        add(tree[x][type], tree[x &lt;&lt; <span class="number">1</span>][type], <span class="number">0</span>);</span><br><span class="line">        add(tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>][type], tree[x][type], INT_MAX);</span><br><span class="line">        add(tree[x][type], tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>][type], <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        add(tree[x][type], tree[x &lt;&lt; <span class="number">1</span>][type], INT_MAX);</span><br><span class="line">        add(tree[x &lt;&lt; <span class="number">1</span>][type], tree[x][type], <span class="number">0</span>);</span><br><span class="line">        add(tree[x][type], tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>][type], INT_MAX);</span><br><span class="line">        add(tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>][type], tree[x][type], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addTree</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> la, <span class="keyword">int</span> ra, <span class="keyword">int</span> p, <span class="keyword">int</span> val, <span class="keyword">int</span> x, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= la &amp;&amp; r &lt;= ra) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">            add(tree[x][type], p, val);</span><br><span class="line">            add(p, tree[x][type], <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            add(p, tree[x][type], val);</span><br><span class="line">            add(tree[x][type], p, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (la &lt;= mid) addTree(l, mid, la, ra, p, val, x &lt;&lt; <span class="number">1</span>, type);</span><br><span class="line">    <span class="keyword">if</span> (ra &gt; mid) addTree(mid + <span class="number">1</span>, r, la, ra, p, val, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++tot;</span><br><span class="line">    addTree(<span class="number">1</span>, k, l, r, p, val, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    addTree(<span class="number">1</span>, k, L, R, p, val, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep);</span><br><span class="line">    q.push(s);</span><br><span class="line">    dep[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = fir[x]; i; i = nx[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = to[i];</span><br><span class="line">            <span class="keyword">if</span> (!dep[v] &amp;&amp; w[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                dep[v] = dep[x] + <span class="number">1</span>;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dep[t] &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t, <span class="keyword">int</span> Flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> Flow;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[x]; i; i = nx[i]) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = to[i];</span><br><span class="line">        <span class="keyword">if</span> (dep[v] == dep[x] + <span class="number">1</span> &amp;&amp; w[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nowFlow = Dfs(v, t, min(Flow, w[i]));</span><br><span class="line">            <span class="keyword">if</span> (!nowFlow) <span class="keyword">continue</span>;</span><br><span class="line">            w[i] -= nowFlow;</span><br><span class="line">            w[i ^ <span class="number">1</span>] += nowFlow;</span><br><span class="line">            <span class="keyword">return</span> nowFlow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sumFlow = <span class="number">0</span>, d;</span><br><span class="line">    <span class="keyword">while</span> (Bfs(s, t)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, fir, <span class="keyword">sizeof</span> fir);</span><br><span class="line">        <span class="keyword">while</span> (d = Dfs(s, t, INT_MAX)) &#123;</span><br><span class="line">            sumFlow += d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumFlow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m), read(k);</span><br><span class="line">    tot = k;</span><br><span class="line">    build(<span class="number">1</span>, k, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    build(<span class="number">1</span>, k, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> opt, l, r, L, R, val;   </span><br><span class="line">    rep (i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        read(opt), read(val);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            read(l), read(r);</span><br><span class="line">            add(l, r, val), add(r, l, <span class="number">0</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">2</span>) &#123;</span><br><span class="line">            read(l), read(r), read(L);</span><br><span class="line">            addEdge(l, r, L, L, val);</span><br><span class="line">            addEdge(L, L, l, r, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">3</span>) &#123;</span><br><span class="line">            read(l), read(L), read(R);</span><br><span class="line">            addEdge(l, l, L, R, val);</span><br><span class="line">            addEdge(L, R, l, l, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">4</span>) &#123;</span><br><span class="line">            read(l), read(r), read(L), read(R);</span><br><span class="line">            addEdge(l, r, L, R, val);</span><br><span class="line">            addEdge(L, R, l, r, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">1</span>, n);</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Dinic(<span class="number">0</span>, k));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> _____  ____    _____</span></span><br><span class="line"><span class="comment">|__  / |  _ \  |__  /</span></span><br><span class="line"><span class="comment">  / /  | |_) |   / / </span></span><br><span class="line"><span class="comment"> / /_  |  _ &lt;   / /_ </span></span><br><span class="line"><span class="comment">/____| |_| \_\ /____|</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ________________________________________ </span></span><br><span class="line"><span class="comment">&lt; 5029.cpp is created by zrz who is weak &gt;</span></span><br><span class="line"><span class="comment"> ---------------------------------------- </span></span><br><span class="line"><span class="comment">        \   ^__^</span></span><br><span class="line"><span class="comment">         \  (^^)\_______</span></span><br><span class="line"><span class="comment">            (__)\       )\/\</span></span><br><span class="line"><span class="comment">             U ||----w |</span></span><br><span class="line"><span class="comment">                ||     ||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于每一种长度开一个点，那么每种操作分别建边跑网络流。&lt;/p&gt;
&lt;p&gt;因为有区间加边所以要线段树优化建边。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;p&gt;代码：
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://zrz-orz.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://zrz-orz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="网络流" scheme="https://zrz-orz.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「CERC」Bricks</title>
    <link href="https://zrz-orz.github.io/2019/09/22/%E3%80%8CCERC%E3%80%8DBricks/"/>
    <id>https://zrz-orz.github.io/2019/09/22/「CERC」Bricks/</id>
    <published>2019-09-22T12:37:05.000Z</published>
    <updated>2019-09-23T06:14:46.518Z</updated>
    
    <content type="html"><![CDATA[<p>首先发现一个性质。</p><p>分割的比例为黑白砖块总数的比</p><p>那么能分就分。</p><p>要判只有一种颜色的情况</p><p>&lt;!-- more --&gt;</p><p>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defination &#123;&#123;&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI std::pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(reg int i = a; i &lt;= b; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, a, b) for(reg int i = a; i &gt;= b; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="comment">// &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">min</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; reg <span class="keyword">char</span> ch = getchar(); reg <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(ch); ch = getchar()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">ll all[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> val, type;</span><br><span class="line">&#125; a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        read(n);</span><br><span class="line">        all[<span class="number">0</span>] = all[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        rep (i, <span class="number">1</span>, n) &#123;</span><br><span class="line">            read(a[i].val);</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%s"</span>, s);</span><br><span class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'W'</span>) a[i].type = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> a[i].type = <span class="number">0</span>;</span><br><span class="line">            all[a[i].type] += a[i].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!all[<span class="number">0</span>] || !all[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, all[<span class="number">0</span>] + all[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll tot[<span class="number">2</span>], ans = <span class="number">0</span>;</span><br><span class="line">        tot[<span class="number">0</span>] = tot[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        rep (i, <span class="number">1</span>, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tot[<span class="number">0</span>] &amp;&amp; !tot[<span class="number">1</span>]) tot[a[i].type] = a[i].val;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i].type == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tot[<span class="number">0</span>] * all[<span class="number">1</span>] % all[<span class="number">0</span>]) &#123;</span><br><span class="line">                        tot[<span class="number">1</span>] += a[i].val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ll need = tot[<span class="number">0</span>] * all[<span class="number">1</span>] / all[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">if</span> (need == <span class="number">0</span>) &#123;</span><br><span class="line">                        tot[<span class="number">1</span>] += a[i].val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (need &lt;= a[i].val + tot[<span class="number">1</span>] &amp;&amp; need - tot[<span class="number">1</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        ll tmp = tot[<span class="number">1</span>] + a[i].val - need;</span><br><span class="line">                        tot[<span class="number">0</span>] = tot[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                        tot[<span class="number">1</span>] = tmp;</span><br><span class="line">                        ++ans;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        tot[<span class="number">1</span>] += a[i].val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tot[<span class="number">1</span>] * all[<span class="number">0</span>] % all[<span class="number">1</span>]) &#123;</span><br><span class="line">                        tot[<span class="number">0</span>] += a[i].val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ll need = tot[<span class="number">1</span>] * all[<span class="number">0</span>] / all[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (need == <span class="number">0</span>) &#123;</span><br><span class="line">                        tot[<span class="number">0</span>] += a[i].val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (need &lt;= a[i].val + tot[<span class="number">0</span>] &amp;&amp; need - tot[<span class="number">0</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        ll tmp = tot[<span class="number">0</span>] + a[i].val - need;</span><br><span class="line">                        tot[<span class="number">0</span>] = tot[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                        tot[<span class="number">0</span>] = tmp;</span><br><span class="line">                        ++ans;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        tot[<span class="number">0</span>] += a[i].val;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> _____  ____    _____</span></span><br><span class="line"><span class="comment">|__  / |  _ \  |__  /</span></span><br><span class="line"><span class="comment">  / /  | |_) |   / / </span></span><br><span class="line"><span class="comment"> / /_  |  _ &lt;   / /_ </span></span><br><span class="line"><span class="comment">/____| |_| \_\ /____|</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ________________________________________ </span></span><br><span class="line"><span class="comment">&lt; 4763.cpp is created by zrz who is weak &gt;</span></span><br><span class="line"><span class="comment"> ---------------------------------------- </span></span><br><span class="line"><span class="comment">        \   ^__^</span></span><br><span class="line"><span class="comment">         \  (^^)\_______</span></span><br><span class="line"><span class="comment">            (__)\       )\/\</span></span><br><span class="line"><span class="comment">             U ||----w |</span></span><br><span class="line"><span class="comment">                ||     ||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先发现一个性质。&lt;/p&gt;
&lt;p&gt;分割的比例为黑白砖块总数的比&lt;/p&gt;
&lt;p&gt;那么能分就分。&lt;/p&gt;
&lt;p&gt;要判只有一种颜色的情况&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;p&gt;代码：
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;ta
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://zrz-orz.github.io/tags/OI/"/>
    
      <category term="贪心" scheme="https://zrz-orz.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>「Test」全连</title>
    <link href="https://zrz-orz.github.io/2019/09/22/%E3%80%8CTest%E3%80%8D%E5%85%A8%E8%BF%9E/"/>
    <id>https://zrz-orz.github.io/2019/09/22/「Test」全连/</id>
    <published>2019-09-22T11:46:07.000Z</published>
    <updated>2019-09-23T06:15:13.641Z</updated>
    
    <content type="html"><![CDATA[<p>考试的时候想到了线段树，但时间不够就随手打了打，超时了</p><p>晚上去厕所的时候想了一下，发现自己傻逼了。。</p><p>在维护左端点的时候用堆维护一下就好了。</p><p>我居然傻乎乎的写了考试的时候那种 ZZ 做法。。</p><p>&lt;!-- more --&gt;</p><p>代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defination &#123;&#123;&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI std::pair<span class="meta-string">&lt;long long, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(reg int i = a; i &lt;= b; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, a, b) for(reg int i = a; i &gt;= b; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="comment">// &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">min</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; reg <span class="keyword">char</span> ch = getchar(); reg <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(ch); ch = getchar()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll t[N], a[N];</span><br><span class="line">ll f[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    PI tree[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tree[x &lt;&lt; <span class="number">1</span>].first &gt; tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].first) tree[x] = tree[x &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> tree[x] = tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, ll val, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> tree[x].first = val, tree[x].second = l, <span class="keyword">void</span>();</span><br><span class="line">        reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid) modify(l, mid, pos, val, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> modify(mid + <span class="number">1</span>, r, pos, val, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">PI <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> la, <span class="keyword">int</span> ra, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= la &amp;&amp; r &lt;= ra) <span class="keyword">return</span> tree[x];</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        PI res;</span><br><span class="line">        res.first = -LLONG_MAX;</span><br><span class="line">        res.second = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (la &lt;= mid) res = query(l, mid, la, ra, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ra &gt; mid) &#123;</span><br><span class="line">            PI tmp = query(mid + <span class="number">1</span>, r, la, ra, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp.first &gt;= res.first) res = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> tree[x].first = -LLONG_MAX, tree[x].second = <span class="number">0</span>, <span class="keyword">void</span>();</span><br><span class="line">        reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(l, mid, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        build(mid + <span class="number">1</span>, r, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot; </span><br><span class="line"><span class="keyword">int</span> tf[N];</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::priority_queue&lt;PI&gt; q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen (<span class="string">"fc.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen (<span class="string">"fc.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    read(n);</span><br><span class="line">    seg.build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    rep (i, <span class="number">1</span>, n) read(t[i]);</span><br><span class="line">    rep (i, <span class="number">1</span>, n) read(a[i]), a[i] = a[i] * t[i];</span><br><span class="line">    per (i, n, <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty() &amp;&amp; q.top().first &gt;= i) &#123;</span><br><span class="line">            reg PI tmp = q.top();</span><br><span class="line">            q.pop();</span><br><span class="line">            seg.modify(<span class="number">1</span>, n, tmp.second, f[tmp.second], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        reg <span class="keyword">int</span> pos = i + t[i];</span><br><span class="line">        <span class="keyword">if</span> (pos &gt; n) f[i] = a[i];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            reg PI tmp = seg.query(<span class="number">1</span>, n, pos, n, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp.first == -LLONG_MAX) &#123;</span><br><span class="line">                f[i] = a[i];</span><br><span class="line">                q.push(mk(i - t[i], i));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reg <span class="keyword">int</span> id = tmp.second;</span><br><span class="line">            <span class="keyword">if</span> (id - t[id] &lt; i) &#123;</span><br><span class="line">                tf[++tot] = id;</span><br><span class="line">                seg.modify(<span class="number">1</span>, n, id, -LLONG_MAX, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i] = f[id] + a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q.push(mk(i - t[i], i));</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    rep (i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        ans = max(ans, f[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> _____  ____    _____</span></span><br><span class="line"><span class="comment">|__  / |  _ \  |__  /</span></span><br><span class="line"><span class="comment">  / /  | |_) |   / / </span></span><br><span class="line"><span class="comment"> / /_  |  _ &lt;   / /_ </span></span><br><span class="line"><span class="comment">/____| |_| \_\ /____|</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ______________________________________ </span></span><br><span class="line"><span class="comment">&lt; fc.cpp is created by zrz who is weak &gt;</span></span><br><span class="line"><span class="comment"> -------------------------------------- </span></span><br><span class="line"><span class="comment">        \   ^__^</span></span><br><span class="line"><span class="comment">         \  (^^)\_______</span></span><br><span class="line"><span class="comment">            (__)\       )\/\</span></span><br><span class="line"><span class="comment">             U ||----w |</span></span><br><span class="line"><span class="comment">                ||     ||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;考试的时候想到了线段树，但时间不够就随手打了打，超时了&lt;/p&gt;
&lt;p&gt;晚上去厕所的时候想了一下，发现自己傻逼了。。&lt;/p&gt;
&lt;p&gt;在维护左端点的时候用堆维护一下就好了。&lt;/p&gt;
&lt;p&gt;我居然傻乎乎的写了考试的时候那种 ZZ 做法。。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more 
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://zrz-orz.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://zrz-orz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态规划" scheme="https://zrz-orz.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu 2787」 语文1(chin1)-理理思维</title>
    <link href="https://zrz-orz.github.io/2019/09/22/%E3%80%8CLuogu-2787%E3%80%8D-%E8%AF%AD%E6%96%871-chin1-%E7%90%86%E7%90%86%E6%80%9D%E7%BB%B4/"/>
    <id>https://zrz-orz.github.io/2019/09/22/「Luogu-2787」-语文1-chin1-理理思维/</id>
    <published>2019-09-22T04:00:42.000Z</published>
    <updated>2019-09-23T06:14:59.981Z</updated>
    
    <content type="html"><![CDATA[<p>听说这是珂朵莉树的板子，但是我不会</p><p>开 $26$ 棵线段树，线段树要支持区间赋值，区间求和。</p><p>之后的就暴力更新。</p><p>毒瘤题面，在最后说大小写不敏感。。</p><p>&lt;!-- more --&gt;</p><p>代码：</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defination &#123;&#123;&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI std::pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(reg int i = a; i &lt;= b; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, a, b) for(reg int i = a; i &gt;= b; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="comment">// &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">min</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; reg <span class="keyword">char</span> ch = getchar(); reg <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(ch); ch = getchar()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> tree[N &lt;&lt; <span class="number">2</span>], tag[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    SegmentTree() &#123; <span class="built_in">memset</span>(tag, <span class="number">-1</span>, <span class="keyword">sizeof</span> tag); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[x] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            tree[x &lt;&lt; <span class="number">1</span>] = tag[x] * (mid - l + <span class="number">1</span>), tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = tag[x] * (r - mid);</span><br><span class="line">            tag[x &lt;&lt; <span class="number">1</span>] = tag[x], tag[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = tag[x];</span><br><span class="line">            tag[x] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> la, <span class="keyword">int</span> ra, <span class="keyword">int</span> x, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= la &amp;&amp; r &lt;= ra) &#123;</span><br><span class="line">            tree[x] = val * (r - l + <span class="number">1</span>);</span><br><span class="line">            tag[x] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(x, l, r);</span><br><span class="line">        <span class="keyword">if</span> (la &lt;= mid) modify(l, mid, la, ra, x &lt;&lt; <span class="number">1</span>, val);</span><br><span class="line">        <span class="keyword">if</span> (ra &gt; mid) modify(mid + <span class="number">1</span>, r, la, ra, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, val);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> la, <span class="keyword">int</span> ra, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= la &amp;&amp; r &lt;= ra) <span class="keyword">return</span> tree[x];</span><br><span class="line">        reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        pushdown(x, l, r);</span><br><span class="line">        <span class="keyword">if</span> (la &lt;= mid) res += query(l, mid, la, ra, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ra &gt; mid) res += query(mid + <span class="number">1</span>, r, la, ra, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; seg[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    rep (i, <span class="number">0</span>, <span class="number">25</span>) &#123;</span><br><span class="line">        seg[i].modify(<span class="number">1</span>, n, l, r, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    seg[id].modify(<span class="number">1</span>, n, l, r, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">30</span>];</span><br><span class="line">    <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">    rep (i, <span class="number">0</span>, <span class="number">25</span>) tmp[i] = seg[i].query(<span class="number">1</span>, n, l, r, <span class="number">1</span>);</span><br><span class="line">    rep (i, <span class="number">0</span>, <span class="number">25</span>) seg[i].modify(<span class="number">1</span>, n, l, r, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> pos = l;</span><br><span class="line">    rep (i, <span class="number">0</span>, <span class="number">25</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = pos + tmp[i] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; pos) <span class="keyword">continue</span>;</span><br><span class="line">        seg[i].modify(<span class="number">1</span>, n, pos, nx, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        pos = nx + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    rep (i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">'a'</span> &amp;&amp; s[i] &lt;= <span class="string">'z'</span>) s[i] = s[i] - <span class="string">'a'</span> + <span class="string">'A'</span>;</span><br><span class="line">        seg[s[i] - <span class="string">'A'</span>].modify(<span class="number">1</span>, n, i, i, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> opt, l, r;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        read(opt), read(l), read(r);</span><br><span class="line">        <span class="keyword">switch</span>(opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%s"</span>, str);</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">0</span>] &gt;= <span class="string">'a'</span> &amp;&amp; str[<span class="number">0</span>] &lt;= <span class="string">'z'</span>) str[<span class="number">0</span>] = str[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="string">'A'</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, seg[str[<span class="number">0</span>] - <span class="string">'A'</span>].query(<span class="number">1</span>, n, l, r, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%s"</span>, str);</span><br><span class="line">            <span class="keyword">if</span> (str[<span class="number">0</span>] &gt;= <span class="string">'a'</span> &amp;&amp; str[<span class="number">0</span>] &lt;= <span class="string">'z'</span>) str[<span class="number">0</span>] = str[<span class="number">0</span>] - <span class="string">'a'</span> + <span class="string">'A'</span>;</span><br><span class="line">            Modify(l, r, str[<span class="number">0</span>] - <span class="string">'A'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">            Sort(l, r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> _____  ____    _____</span></span><br><span class="line"><span class="comment">|__  / |  _ \  |__  /</span></span><br><span class="line"><span class="comment">  / /  | |_) |   / / </span></span><br><span class="line"><span class="comment"> / /_  |  _ &lt;   / /_ </span></span><br><span class="line"><span class="comment">/____| |_| \_\ /____|</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ________________________________________ </span></span><br><span class="line"><span class="comment">&lt; 2787.cpp is created by zrz who is weak &gt;</span></span><br><span class="line"><span class="comment"> ---------------------------------------- </span></span><br><span class="line"><span class="comment">        \   ^__^</span></span><br><span class="line"><span class="comment">         \  (^^)\_______</span></span><br><span class="line"><span class="comment">            (__)\       )\/\</span></span><br><span class="line"><span class="comment">             U ||----w |</span></span><br><span class="line"><span class="comment">                ||     ||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;听说这是珂朵莉树的板子，但是我不会&lt;/p&gt;
&lt;p&gt;开 $26$ 棵线段树，线段树要支持区间赋值，区间求和。&lt;/p&gt;
&lt;p&gt;之后的就暴力更新。&lt;/p&gt;
&lt;p&gt;毒瘤题面，在最后说大小写不敏感。。&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
      
    
    </summary>
    
    
    
      <category term="OI" scheme="https://zrz-orz.github.io/tags/OI/"/>
    
      <category term="数据结构" scheme="https://zrz-orz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="https://zrz-orz.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>「ZJOI2013」 K大数查询</title>
    <link href="https://zrz-orz.github.io/2019/09/22/%E3%80%8CZJOI2013%E3%80%8D-K%E5%A4%A7%E6%95%B0%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zrz-orz.github.io/2019/09/22/「ZJOI2013」-K大数查询/</id>
    <published>2019-09-22T02:35:41.000Z</published>
    <updated>2019-09-22T02:52:04.414Z</updated>
    
    <content type="html"><![CDATA[<p>这道题我们可以使用毒瘤树套树写，但是我太菜了，不想写。</p><p>于是我们可以想各种离线算法，这道题我是使用的整体二分。</p><blockquote><p>整体二分就是把所有询问一起二分--Kewth</p></blockquote><p>所以我们每次二分一个值，用各种数据结构快速求出每个询问的状态，那么这就是整体二分了。</p><blockquote><p>整体二分只是一个小 Trick，随便 YY　一下就出来了--CYJian</p></blockquote><a id="more"></a><p>整体二分的模板类似于这样</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;   <span class="comment">// l, r: 二分的区间 L, R：　当前被考虑的询问区间</span></span><br><span class="line">     <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">     <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        ...    <span class="comment">// 统计答案</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R; ++i) &#123;</span><br><span class="line">         ...   <span class="comment">// 执行操作</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     ...   <span class="comment">// 还原操作</span></span><br><span class="line">     </span><br><span class="line">     solve(l, mid, L, head);</span><br><span class="line">     solve(mid + <span class="number">1</span>, r, head + <span class="number">1</span>, R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于这道题，我们每次二分一个值 $mid$ ，用线段树统计出有多少个值大于当前询问，如果当前大于 $mid$ 的数比这个询问的 $K$ 大，我们就把他放入右边区间，否则将 $K$ 减去 $mid$ 放入左区间。</p><p>细节很多。</p><p>代码：</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defination &#123;&#123;&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI std::pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mk std::make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, a, b) for(reg int i = a; i &lt;= b; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, a, b) for(reg int i = a; i &gt;= b; --i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="comment">// &#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">max</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">min</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; reg <span class="keyword">char</span> ch = getchar(); reg <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(ch); ch = getchar()) <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(ch); ch = getchar()) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll ans[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> opt, l, r, id;</span><br><span class="line">    ll x;</span><br><span class="line">&#125; q[N], lt[N], rt[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ll tree[N &lt;&lt; <span class="number">2</span>], tag[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tag[x]) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            tree[x &lt;&lt; <span class="number">1</span>] += tag[x] * (mid - l + <span class="number">1</span>);</span><br><span class="line">            tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[x] * (r - mid);</span><br><span class="line">            tag[x &lt;&lt; <span class="number">1</span>] += tag[x], tag[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[x];</span><br><span class="line">            tag[x] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> la, <span class="keyword">int</span> ra, <span class="keyword">int</span> val, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= la &amp;&amp; r &lt;= ra) <span class="keyword">return</span> tree[x] += val * (r - l + <span class="number">1</span>), tag[x] += val, <span class="keyword">void</span>();</span><br><span class="line">        reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(x, l, r);</span><br><span class="line">        <span class="keyword">if</span> (la &lt;= mid) modify(l, mid, la, ra, val, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ra &gt; mid) modify(mid + <span class="number">1</span>, r, la, ra, val, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> la, <span class="keyword">int</span> ra, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= la &amp;&amp; r &lt;= ra) <span class="keyword">return</span> tree[x];</span><br><span class="line">        reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(x, l, r);</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (la &lt;= mid) res += query(l, mid, la, ra, x &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (ra &gt; mid) res += query(mid + <span class="number">1</span>, r, la, ra, x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        rep (i, L, R) <span class="keyword">if</span> (q[i].opt == <span class="number">2</span>) ans[q[i].id] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reg <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">    rep (i, L, R) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i].opt == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i].x &gt; mid) seg.modify(<span class="number">1</span>, n, q[i].l, q[i].r, <span class="number">1</span>, <span class="number">1</span>), rt[++tail] = q[i];</span><br><span class="line">            <span class="keyword">else</span> lt[++head] = q[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ll cnt = seg.query(<span class="number">1</span>, n, q[i].l, q[i].r, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt;= q[i].x) rt[++tail] = q[i];</span><br><span class="line">            <span class="keyword">else</span> q[i].x -= cnt, lt[++head] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rep (i, L, R) <span class="keyword">if</span> (q[i].opt == <span class="number">1</span> &amp;&amp; q[i].x &gt; mid) seg.modify(<span class="number">1</span>, n, q[i].l, q[i].r, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    rep (i, <span class="number">1</span>, head) q[i + L - <span class="number">1</span>] = lt[i];</span><br><span class="line">    rep (i, <span class="number">1</span>, tail) q[head + L + i - <span class="number">1</span>] = rt[i];</span><br><span class="line">    solve(l, mid, L, head + L - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>, r, head + L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n), read(m);</span><br><span class="line">    <span class="keyword">int</span> opt, l, r, x;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    rep (i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        read(q[i].opt), read(q[i].l), read(q[i].r), read(q[i].x);</span><br><span class="line">        <span class="keyword">if</span> (q[i].opt == <span class="number">2</span>) q[i].id = ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(-n, n, <span class="number">1</span>, m);</span><br><span class="line">    rep (i, <span class="number">1</span>, tot) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> _____  ____    _____</span></span><br><span class="line"><span class="comment">|__  / |  _ \  |__  /</span></span><br><span class="line"><span class="comment">  / /  | |_) |   / / </span></span><br><span class="line"><span class="comment"> / /_  |  _ &lt;   / /_ </span></span><br><span class="line"><span class="comment">/____| |_| \_\ /____|</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ________________________________________ </span></span><br><span class="line"><span class="comment">&lt; 3332.cpp is created by zrz who is weak &gt;</span></span><br><span class="line"><span class="comment"> ---------------------------------------- </span></span><br><span class="line"><span class="comment">        \   ^__^</span></span><br><span class="line"><span class="comment">         \  (^^)\_______</span></span><br><span class="line"><span class="comment">            (__)\       )\/\</span></span><br><span class="line"><span class="comment">             U ||----w |</span></span><br><span class="line"><span class="comment">                ||     ||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这道题我们可以使用毒瘤树套树写，但是我太菜了，不想写。&lt;/p&gt;&lt;p&gt;于是我们可以想各种离线算法，这道题我是使用的整体二分。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;整体二分就是把所有询问一起二分
--Kewth&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;所以我们每次二分一个值，用各种数据结构快速求出每个询问的状态，那么这就是整体二分了。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;整体二分只是一个小 Trick，随便 YY　一下就出来了
--CYJian&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://zrz-orz.github.io/tags/OI/"/>
    
      <category term="整体二分" scheme="https://zrz-orz.github.io/tags/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演相关记录</title>
    <link href="https://zrz-orz.github.io/2019/09/20/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
    <id>https://zrz-orz.github.io/2019/09/20/莫比乌斯反演相关记录/</id>
    <published>2019-09-20T12:05:33.000Z</published>
    <updated>2019-09-22T02:37:07.394Z</updated>
    
    <content type="html"><![CDATA[<h2>关于一些莫比乌斯反演的东西</h2><h3>常用操作</h3><p>$$[gcd(i,j) == 1] = \sum_{d | gcd(i, j)} \mu(d)$$</p><h3>例题</h3><hr><h4>yy的gcd</h4><p>$$\sum_{t \in prime} \sum_{i = 1}^n \sum_{j = 1}^m  [gcd(i, j) == t]$$</p><p>$$\sum_{t \in prime} \sum_{i = 1}^{\lfloor\frac{n}{t}\rfloor} \sum_{j = 1}^{\lfloor\frac{m}{t}\rfloor}  [gcd(i, j) == 1]$$</p><a id="more"></a><p>$$\sum_{t \in prime} \sum_{i = 1}^{\lfloor\frac{n}{t}\rfloor} \sum_{j = 1}^{\lfloor\frac{m}{t}\rfloor}  \sum_{d | gcd(i, j)} \mu(d)$$</p><p>$$\sum_{t \in prime} \sum_{d = 1}^{\lfloor\frac{n}{t}\rfloor} \mu(d) \times \lfloor\frac{n}{dt}\rfloor \times \lfloor\frac{m}{dt}\rfloor$$</p><p>令 $T = td $</p><p>$$\sum_{T = 1}^{min(n, m)} \lfloor\frac{n}{T}\rfloor \times \lfloor\frac{m}{T}\rfloor \sum_{d | T, d \in prime} \mu (\frac{T}{d})$$</p><hr><h4>Crash的数字表格</h4><p>$$\sum_{i = 1}^n \sum_{j = 1}^m lcm(i, j)$$</p><p>$$\sum_{i = 1}^n \sum_{j = 1}^m \frac{ij}{gcd(i, j)}$$</p><p>$$\sum_{t = 1}^{min(n, m)} t\  \sum_{i = 1}^{\lfloor\frac{n}{t}\rfloor} \sum_{j = 1}^{\lfloor\frac{m}{t}\rfloor} [gcd(i, j] == 1]\  ij$$</p><p>$$\sum_{t = 1}^{min(n, m)} t\  \sum_{i = 1}^{\lfloor\frac{n}{t}\rfloor} \sum_{j = 1}^{\lfloor\frac{m}{t}\rfloor} \sum_{d | gcd(i, j)} \mu (d) ij$$</p><p>记 $sum(n) = \frac{n * (n + 1)}{2}$</p><p>$$\sum_{t = 1}^{min(n, m)} t\  \sum_{d = 1}^{min(\lfloor\frac{n}{t}\rfloor, \lfloor\frac{m}{t}\rfloor)} d^2 \mu(d) \times sum(\lfloor\frac{n}{td}\rfloor) \times sum(\lfloor\frac{m}{td}\rfloor)$$</p><p>记 $ f(n, m) = \sum_{d = 1}^{min(n, m)} d^2 \mu(d) \times sum(\lfloor\frac{n}{d}\rfloor) \times sum(\lfloor\frac{m}{d}\rfloor) $</p><p>$$\sum_{t = 1}^{min(n, m)} t \times f(\lfloor\frac{n}{t}\rfloor, \lfloor\frac{m}{t}\rfloor)$$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;关于一些莫比乌斯反演的东西&lt;/h2&gt;&lt;h3&gt;常用操作&lt;/h3&gt;&lt;p&gt;$$
[gcd(i,j) == 1] = \sum_{d | gcd(i, j)} \mu(d)
$$&lt;/p&gt;&lt;h3&gt;例题&lt;/h3&gt;&lt;hr&gt;&lt;h4&gt;yy的gcd&lt;/h4&gt;&lt;p&gt;$$
\sum_{t \in prime} \sum_{i = 1}^n \sum_{j = 1}^m  [gcd(i, j) == t]
$$&lt;/p&gt;&lt;p&gt;$$
\sum_{t \in prime} \sum_{i = 1}^{\lfloor\frac{n}{t}\rfloor} \sum_{j = 1}^{\lfloor\frac{m}{t}\rfloor}  [gcd(i, j) == 1]
$$&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="OI" scheme="https://zrz-orz.github.io/tags/OI/"/>
    
      <category term="数论" scheme="https://zrz-orz.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="https://zrz-orz.github.io/2019/09/20/hello-world/"/>
    <id>https://zrz-orz.github.io/2019/09/20/hello-world/</id>
    <published>2019-09-20T08:37:21.000Z</published>
    <updated>2019-09-21T06:23:07.464Z</updated>
    
    <content type="html"><![CDATA[<h3>Hello, Hexo</h3><blockquote><p>Hello, Hexo</p></blockquote><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Hello, Hexo"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;Hello, Hexo&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, Hexo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
    
      <category term="杂项" scheme="https://zrz-orz.github.io/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
</feed>
